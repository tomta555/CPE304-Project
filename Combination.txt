    lw    0    1    n    load n to $1
    lw    0    2    r    load r to $2
    lw    0    5    stackAddr    load stackAddress to $5 // $5 = stack starting pointer 
    lw    0    4    combiAddr    $4 = combiAddress
    jalr    4    7    call combi        
    lw    0    1    n    load n to $1    
    lw    0    2    r    load r to $2
    halt     end of program        
combi    lw    0    6    four    $6 = 4
    add    5    6    5    Increase stack pointer + 4
    sw    5    7    -1    store $7 in stackpointer-1
    lw    0    6    one    load 1 to $6
    add    0    1    3    $3 = n 
    beq    2    6    ret1    r==1 return n
    lw    0    3    one    $6 = 1
    beq    1    2    ret1    n==r  go return 1 
    beq    0    2    ret1    r==0  go return 1  
    sw    5    1    -3    store $1 in stackpointer-3
    sw    5    2    -2    store $2 in stackpointer-2  
    lw    0    6    neg1    $6 = -1
    add    1    6    1    n-1   
    jalr    4    7       call combi(n-1,r)
    sw    5    3    stack    store combi(n-1,r) in $3
    lw    5    1    -3     load stackpointer-3 to $1
    lw    5    2    -2     load stackpointer-2 to $2
    lw    0    6    neg1    $6 = -1
    add    1    6    1    n-1
    add    2    6    2    r-1
    jalr    4    7     call combi(n-1,r-1)
    lw    5    6    stack    load stackpointer to $6 // load combi(n-1,r) to $6
    add    3    6    3    combi(n-1,r) + combi(n-1,r-1) // 3first = combi(n-2,r-1) 
ret1    lw    0    6    neg4     $6 = -4
    lw    5    7    -1       load returnAddres to &7
    add    5    6    5          delete stack 4 
    jalr    7    6     go to returnAddres
combiAddr    .fill    combi     
n    .fill    7           
r    .fill    3       
one    .fill    1      
neg1    .fill    -1     
four    .fill    4    
neg4    .fill    -4    
stackAddr    .fill    stack     
stack    .fill    0         